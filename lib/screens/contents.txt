import 'dart:typed_data';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:file_picker/file_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
// import 'package:random_string/random_string.dart';
import 'package:wikipidea_application/screens/About.dart';
// import 'package:wikipidea_application/screens/dummy.dart';
import 'package:wikipidea_application/screens/homepage.dart';
import 'package:wikipidea_application/screens/upload_data.dart';
import 'package:wikipidea_application/service/database.dart';

class Contents extends StatefulWidget {
  const Contents({super.key});

  @override
  State<Contents> createState() => _ContentsState();
}

class _ContentsState extends State<Contents> {
  Stream? getuploaded;
  TextEditingController titlename = new TextEditingController();
  TextEditingController discriptiondata = new TextEditingController();
  String downloadURL = '';

  void _pickAndUploadImage() async {
    FilePickerResult? result =
        await FilePicker.platform.pickFiles(type: FileType.image);

    if (result != null) {
      PlatformFile file = result.files.first;

      FirebaseStorage storage = FirebaseStorage.instance;

      String fileName = file.name;
      Reference storageRef = storage.ref().child('testimages/$fileName');

      try {
        Uint8List fileBytes = file.bytes!;
        UploadTask uploadTask = storageRef.putData(fileBytes);
        TaskSnapshot snapshot = await uploadTask;
        downloadURL = await snapshot.ref.getDownloadURL();
        print("Image uploaded successfully: $downloadURL");
      } catch (e) {
        print("Error uploading image: $e");
      }
    } else {
      print('No file selected');
    }
  }

  getuploadeddata() async {
    getuploaded = await DatabaseMethods().getuploadeddata();
    setState(() {});
  }

  @override
  void initState() {
    getuploadeddata();
    super.initState();
  }

  Widget uploadedata() {
    return StreamBuilder(
        stream: getuploaded,
        builder: (context, AsyncSnapshot snapshot) {
          return snapshot.hasData
              ? ListView.builder(
                  itemCount: snapshot.data.docs.length,
                  itemBuilder: (context, index) {
                    DocumentSnapshot ds = snapshot.data.docs[index];
                    return Container(
                      margin: EdgeInsets.only(bottom: 20),
                      child: Material(
                        elevation: 5.0,
                        borderRadius: BorderRadius.circular(20),
                        child: Container(
                          padding: EdgeInsets.all(20),
                          width: MediaQuery.of(context).size.width,
                          decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(20)),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Text(
                                    "Title:  " + ds['title'],
                                    style: TextStyle(
                                        color: Colors.black,
                                        fontSize: 18.0,
                                        fontWeight: FontWeight.normal),
                                  ),
                                  Spacer(),
                                  GestureDetector(
                                      onTap: () {
                                        titlename.text = ds["title"];
                                        discriptiondata.text =
                                            ds['description'];

                                        EditData(ds["id"], ds['url']);
                                        ScaffoldMessenger.of(context)
                                            .showSnackBar(SnackBar(
                                                content: Text(
                                                    "Data and image is Edited!")));
                                      },
                                      child: Icon(Icons.edit)),
                                  SizedBox(
                                    width: 5.0,
                                  ),
                                  GestureDetector(
                                    onTap: () {
                                      print("button clicked");

                                      DatabaseMethods().deleteData(ds["id"]);
                                      print("data deleted");
                                      ScaffoldMessenger.of(context)
                                          .showSnackBar(SnackBar(
                                              content: Text("DELETED!")));
                                    },
                                    child: Icon(Icons.delete),
                                  )
                                ],
                              ),
                              Text(
                                "Description:  " + ds['description'],
                                style: TextStyle(
                                    color: Colors.black,
                                    fontSize: 18.0,
                                    fontWeight: FontWeight.normal),
                              ),
                              Text(
                                "Image: ",
                                style: TextStyle(
                                    color: Colors.black,
                                    fontSize: 18.0,
                                    fontWeight: FontWeight.normal),
                              ),
                              Image.network(
                                ds["url"],
                                height: 200,
                                width: 200,
                              ),

                              // Image.network(
                              //     'https://firebasestorage.googleapis.com/v0/b/stayon-51caa.appspot.com/o/testimages%2Fdownload.png?alt=media&token=898affa5-d043-4456-849e-c67184b4ee84')
                            ],
                          ),
                        ),
                      ),
                    );
                  })
              : Container();
        });
  }

  String selectedPage = '';
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text("Contents"),
        backgroundColor: const Color.fromARGB(255, 155, 232, 214),
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
              decoration:
                  BoxDecoration(color: Color.fromARGB(255, 155, 232, 214)),
              child: Center(
                  child: Text('DETAILS',
                      style: TextStyle(color: Colors.black, fontSize: 24))),
            ),
            ListTile(
              leading: const Icon(Icons.home),
              title: const Text('Home'),
              onTap: () {
                setState(() {
                  selectedPage = "current page";
                  Navigator.push(context,
                      MaterialPageRoute(builder: (context) => MyWikkiApp()));
                  // Navigator.pop(context);
                });
              },
            ),
            ListTile(
              leading: const Icon(Icons.account_box_outlined),
              title: const Text('About'),
              onTap: () {
                setState(() {
                  selectedPage = 'About';
                  Navigator.push(context,
                      MaterialPageRoute(builder: (context) => AboutPage()));
                  // Navigator.pop(context);
                });
              },
            ),
            ListTile(
              leading: const Icon(Icons.upload_sharp),
              title: const Text('Upload data'),
              onTap: () {
                setState(() {
                  selectedPage = 'Data Uploading page ';
                  Navigator.push(context,
                      MaterialPageRoute(builder: (context) => UploadData()));
                  // Navigator.pop(context);
                });
              },
            ),
            ListTile(
              leading: const Icon(Icons.dataset),
              title: const Text('Contents'),
              onTap: () {
                setState(() {
                  selectedPage = 'Stored contents';
                  Navigator.push(context,
                      MaterialPageRoute(builder: (context) => Contents()));
                  // Navigator.pop(context);
                });
              },
            ),
            // ListTile(
            //   leading: const Icon(Icons.list),
            //   title: const Text('Data'),
            //   onTap: () {
            //     //    setState(() {
            //     //     selectedPage = "contents page";
            //     //   });
            //     Navigator.push(
            //         context, MaterialPageRoute(builder: (context) => Dummy()));
            //   },
            // ),
          ],
        ),
      ),
      body: Container(
        margin: EdgeInsets.only(left: 10.0, right: 10.0),
        child: Column(
          children: [
            Expanded(child: uploadedata()),
          ],
        ),
      ),
    );
  }

//  String currentTitle, String Currentd

  Future EditData(String id, String url) => showDialog(
      context: context,
      builder: (context) => AlertDialog(
            content: Container(
              child: Column(
                children: [
                  Row(
                    children: [
                      GestureDetector(
                          onTap: () {
                            Navigator.pop(context);
                          },
                          child: Icon(Icons.cancel)),
                      SizedBox(width: 50.0),
                      Text(
                        "Edit information",
                        style: TextStyle(
                          fontStyle: FontStyle.normal,
                          fontWeight: FontWeight.bold,
                          fontSize: 18.0,
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 20.0),
                  TextField(
                    controller: titlename,
                    decoration: InputDecoration(
                      labelText: 'Title',
                    ),
                    maxLines: 1,
                  ),
                  TextField(
                    controller: discriptiondata,
                    decoration: InputDecoration(
                      labelText: 'Description',
                    ),
                    maxLines: null,
                  ),
                  SizedBox(height: 20.0),
                  Text(
                    "Image:",
                    style: TextStyle(
                        color: Colors.black,
                        fontSize: 18.0,
                        fontWeight: FontWeight.normal),
                  ),
                  Image.network(
                    url,
                    width: 200,
                    height: 200,
                  ),
                  SizedBox(height: 20.0),
                  ElevatedButton(
                    onPressed: () {
                      _pickAndUploadImage();
                      setState(() {
                        url = downloadURL;
                      });
                    },
                    child: Text("Replace image"),
                  ),
                  SizedBox(height: 30.0),
                  ElevatedButton(
                    onPressed: () async {
                      Map<String, dynamic> updateinfo = {
                        "title": titlename.text,
                        "description": discriptiondata.text,
                        // "id"=id
                        "url": downloadURL.isNotEmpty ? downloadURL : url,
                      };
                      //  Text("Image uploaded Successfully");
                      DatabaseMethods().updateData(updateinfo, id).then(
                        (value) {
                          print("$value");
                          Navigator.pop(context);
                        },
                      );
                      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                          content: Text(
                              "Data and image is uploaded successfully!")));
                    },
                    child: Text("Update"),
                  ),
                ],
              ),
            ),
          ));
}
